name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
    paths:
      - '**.tf'
      - '**.tfvars'
      - 'modules/**'
      - '.github/workflows/terraform-cicd.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - '**.tf'
      - '**.tfvars'
      - 'modules/**'
  schedule:
    - cron: '0 2 * * 1'  # Weekly drift detection on Monday at 2 AM
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
          - validate-only
          - cost-estimate

env:
  TERRAFORM_VERSION: '1.5.7'
  TFLINT_VERSION: '0.48.0'
  TFSEC_VERSION: 'latest'
  CHECKOV_VERSION: '3.1.0'
  INFRACOST_VERSION: '0.10.29'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  # Job 1: Determine environment and settings
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      should-deploy: ${{ steps.set-env.outputs.should-deploy }}
      is-pr: ${{ steps.set-env.outputs.is-pr }}
    steps:
      - name: Determine environment and settings
        id: set-env
        run: |
          # Determine environment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "is-pr=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "is-pr=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "is-pr=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "is-pr=false" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "is-pr=false" >> $GITHUB_OUTPUT
          fi

          echo "### Environment Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** $(grep environment <<< "$GITHUB_OUTPUT" | cut -d= -f2)" >> $GITHUB_STEP_SUMMARY
          echo "- **Should Deploy:** $(grep should-deploy <<< "$GITHUB_OUTPUT" | cut -d= -f2)" >> $GITHUB_STEP_SUMMARY
          echo "- **Is PR:** $(grep is-pr <<< "$GITHUB_OUTPUT" | cut -d= -f2)" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY

  # Job 2: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run TFSec Security Scanner
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: true
          format: sarif
          out: tfsec-results.sarif

      - name: Upload TFSec results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: tfsec-results.sarif
          category: tfsec

      - name: Run Checkov Security Scanner
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true
          skip_check: CKV_AZURE_35,CKV_AZURE_36  # Example skip rules

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: checkov-results.sarif
          category: checkov

      - name: Run Trivy Security Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: trivy-results.sarif
          category: trivy

      - name: Security Scan Summary
        if: always()
        run: |
          echo "### Security Scan Results 🔒" >> $GITHUB_STEP_SUMMARY
          echo "- **TFSec:** Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Checkov:** Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Trivy:** Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the Security tab for detailed findings." >> $GITHUB_STEP_SUMMARY

  # Job 3: Terraform Validation and Linting
  validate:
    name: Validate & Lint
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        environment: [dev, staging, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            **/.terraform/providers
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Format Check
        id: fmt
        run: |
          terraform fmt -check -recursive -diff
        continue-on-error: true

      - name: Initialize Terraform
        working-directory: ./environments/${{ matrix.environment }}
        run: |
          terraform init -backend=false

      - name: Validate Terraform
        id: validate
        working-directory: ./environments/${{ matrix.environment }}
        run: |
          terraform validate -no-color

      - name: Initialize TFLint
        run: |
          tflint --init
          cat > .tflint.hcl << 'EOF'
          plugin "azurerm" {
            enabled = true
            version = "0.25.1"
            source  = "github.com/terraform-linters/tflint-ruleset-azurerm"
          }
          rule "terraform_module_pinned_source" {
            enabled = false
          }
          rule "terraform_required_version" {
            enabled = true
          }
          rule "terraform_required_providers" {
            enabled = true
          }
          rule "terraform_naming_convention" {
            enabled = true
          }
          EOF

      - name: Run TFLint
        id: tflint
        working-directory: ./environments/${{ matrix.environment }}
        run: |
          tflint --config ../../.tflint.hcl --format compact
        continue-on-error: true

      - name: Validation Summary
        if: always()
        run: |
          echo "### Validation Results for ${{ matrix.environment }} ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Format Check:** ${{ steps.fmt.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation:** ${{ steps.validate.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **TFLint:** ${{ steps.tflint.outcome }}" >> $GITHUB_STEP_SUMMARY

  # Job 4: Cost Estimation
  cost-estimate:
    name: Cost Estimation
    runs-on: ubuntu-latest
    needs: [setup, validate]
    if: needs.setup.outputs.is-pr == 'true' || github.event.inputs.action == 'cost-estimate'
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Infracost
        uses: infracost/setup-infracost-action@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
          version: ${{ env.INFRACOST_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Initialize Terraform
        working-directory: ./environments/${{ env.ENVIRONMENT }}
        run: |
          terraform init -backend=false

      - name: Generate Infracost JSON
        working-directory: ./environments/${{ env.ENVIRONMENT }}
        run: |
          infracost breakdown \
            --path . \
            --format json \
            --out-file /tmp/infracost.json

      - name: Post Infracost comment
        if: github.event_name == 'pull_request'
        run: |
          infracost comment github \
            --path=/tmp/infracost.json \
            --repo=${{ github.repository }} \
            --pull-request=${{ github.event.pull_request.number }} \
            --github-token=${{ github.token }} \
            --behavior=update

      - name: Generate Cost Report
        run: |
          infracost breakdown --path=/tmp/infracost.json --format=table > cost-report.txt
          echo "### Cost Estimation 💰" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat cost-report.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Job 5: Terraform Plan
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [setup, validate, security-scan]
    environment: ${{ needs.setup.outputs.environment }}
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    outputs:
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}
      has-changes: ${{ steps.plan.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ env.ARM_CLIENT_ID }}",
              "clientSecret": "${{ env.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ env.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ env.ARM_TENANT_ID }}"
            }

      - name: Initialize Terraform
        id: init
        working-directory: ./environments/${{ env.ENVIRONMENT }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.BACKEND_CONTAINER }}" \
            -backend-config="key=${{ env.ENVIRONMENT }}.terraform.tfstate"

      - name: Terraform Plan
        id: plan
        working-directory: ./environments/${{ env.ENVIRONMENT }}
        run: |
          set +e
          terraform plan \
            -var-file="terraform.tfvars" \
            -var="admin_email=${{ secrets.ADMIN_EMAIL }}" \
            -detailed-exitcode \
            -no-color \
            -out=tfplan \
            2>&1 | tee plan-output.txt

          EXITCODE=${PIPESTATUS[0]}
          echo "exitcode=$EXITCODE" >> $GITHUB_OUTPUT

          if [ $EXITCODE -eq 0 ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "### No Changes Required ✅" >> $GITHUB_STEP_SUMMARY
          elif [ $EXITCODE -eq 2 ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "### Changes Detected 🔄" >> $GITHUB_STEP_SUMMARY

            # Extract change summary
            echo '```diff' >> $GITHUB_STEP_SUMMARY
            grep -E '^\s*(~|\+|-)\s' plan-output.txt | head -50 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "### Plan Failed ❌" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -20 plan-output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Upload Plan Artifact
        if: steps.plan.outputs.has-changes == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-${{ env.ENVIRONMENT }}-${{ github.sha }}
          path: environments/${{ env.ENVIRONMENT }}/tfplan
          retention-days: 7

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('environments/${{ env.ENVIRONMENT }}/plan-output.txt', 'utf8');
            const truncatedPlan = planOutput.substring(0, 60000);

            const output = `## Terraform Plan Results 📋

            **Environment:** \`${{ env.ENVIRONMENT }}\`
            **Has Changes:** \`${{ steps.plan.outputs.has-changes }}\`

            <details><summary>Show Plan Output</summary>

            \`\`\`terraform
            ${truncatedPlan}
            \`\`\`

            </details>

            ---
            *Workflow: \`${{ github.workflow }}\` | Commit: \`${{ github.sha }}\`*`;

            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Terraform Plan Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              });
            }

  # Job 6: Terraform Apply/Destroy
  terraform-apply:
    name: Terraform ${{ github.event.inputs.action == 'destroy' && 'Destroy' || 'Apply' }}
    runs-on: ubuntu-latest
    needs: [setup, terraform-plan]
    if: |
      needs.setup.outputs.should-deploy == 'true' &&
      needs.terraform-plan.outputs.has-changes == 'true' &&
      (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment:
      name: ${{ needs.setup.outputs.environment }}
      url: ${{ steps.get-outputs.outputs.app_url }}
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    outputs:
      app_url: ${{ steps.get-outputs.outputs.app_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ env.ARM_CLIENT_ID }}",
              "clientSecret": "${{ env.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ env.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ env.ARM_TENANT_ID }}"
            }

      - name: Download Plan Artifact
        if: github.event.inputs.action != 'destroy'
        uses: actions/download-artifact@v3
        with:
          name: tfplan-${{ env.ENVIRONMENT }}-${{ github.sha }}
          path: environments/${{ env.ENVIRONMENT }}

      - name: Initialize Terraform
        working-directory: ./environments/${{ env.ENVIRONMENT }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.BACKEND_CONTAINER }}" \
            -backend-config="key=${{ env.ENVIRONMENT }}.terraform.tfstate"

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: ./environments/${{ env.ENVIRONMENT }}
        run: |
          terraform destroy \
            -var-file="terraform.tfvars" \
            -var="admin_email=${{ secrets.ADMIN_EMAIL }}" \
            -auto-approve

      - name: Terraform Apply
        if: github.event.inputs.action != 'destroy'
        id: apply
        working-directory: ./environments/${{ env.ENVIRONMENT }}
        run: |
          terraform apply tfplan

          echo "### Deployment Successful! 🚀" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY

      - name: Get Terraform Outputs
        id: get-outputs
        if: github.event.inputs.action != 'destroy'
        working-directory: ./environments/${{ env.ENVIRONMENT }}
        run: |
          # Get all outputs
          terraform output -json > outputs.json

          # Extract specific outputs
          APP_GATEWAY_FQDN=$(terraform output -raw app_gateway_fqdn 2>/dev/null || echo "")
          APP_GATEWAY_IP=$(terraform output -raw app_gateway_public_ip 2>/dev/null || echo "")
          RESOURCE_GROUP=$(terraform output -raw resource_group_name 2>/dev/null || echo "")

          # Set outputs
          if [ -n "$APP_GATEWAY_FQDN" ]; then
            echo "app_url=http://${APP_GATEWAY_FQDN}" >> $GITHUB_OUTPUT
            echo "**Application URL:** [http://${APP_GATEWAY_FQDN}](http://${APP_GATEWAY_FQDN})" >> $GITHUB_STEP_SUMMARY
          fi

          echo "**Resource Group:** ${RESOURCE_GROUP}" >> $GITHUB_STEP_SUMMARY
          echo "**Application Gateway IP:** ${APP_GATEWAY_IP}" >> $GITHUB_STEP_SUMMARY

      - name: Create GitHub Deployment
        if: success() && github.event.inputs.action != 'destroy'
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ env.ENVIRONMENT }}',
              required_contexts: [],
              auto_merge: false,
              description: 'Terraform deployment to ${{ env.ENVIRONMENT }}'
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.get-outputs.outputs.app_url }}',
              description: 'Deployment completed successfully'
            });

  # Job 7: Post-Deployment Tests
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [setup, terraform-apply]
    if: |
      success() &&
      needs.terraform-apply.outputs.app_url != '' &&
      github.event.inputs.action != 'destroy'
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
      APP_URL: ${{ needs.terraform-apply.outputs.app_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for Application
        run: |
          echo "Waiting for application to be ready..."
          sleep 60

      - name: Health Check
        id: health
        run: |
          echo "### Running Smoke Tests 🧪" >> $GITHUB_STEP_SUMMARY
          echo "**Target URL:** ${{ env.APP_URL }}" >> $GITHUB_STEP_SUMMARY

          # Health check
          for i in {1..5}; do
            if curl -f -s -o /dev/null -w "%{http_code}" "${{ env.APP_URL }}/health"; then
              echo "✅ Health check passed" >> $GITHUB_STEP_SUMMARY
              break
            fi
            echo "⏳ Attempt $i failed, retrying..." >> $GITHUB_STEP_SUMMARY
            sleep 30
          done

      - name: Performance Test
        continue-on-error: true
        run: |
          # Simple performance test
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "${{ env.APP_URL }}")
          echo "**Response Time:** ${RESPONSE_TIME}s" >> $GITHUB_STEP_SUMMARY

      - name: Security Headers Check
        continue-on-error: true
        run: |
          # Check security headers
          HEADERS=$(curl -I -s "${{ env.APP_URL }}")
          echo "### Security Headers" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$HEADERS" | grep -E "(X-Frame-Options|X-Content-Type|Strict-Transport)" >> $GITHUB_STEP_SUMMARY || echo "No security headers found" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Job 8: Drift Detection (Scheduled)
  drift-detection:
    name: Drift Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    strategy:
      matrix:
        environment: [dev, staging, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ env.ARM_CLIENT_ID }}",
              "clientSecret": "${{ env.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ env.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ env.ARM_TENANT_ID }}"
            }

      - name: Check for Drift
        working-directory: ./environments/${{ matrix.environment }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.BACKEND_CONTAINER }}" \
            -backend-config="key=${{ matrix.environment }}.terraform.tfstate"

          set +e
          terraform plan \
            -var-file="terraform.tfvars" \
            -var="admin_email=${{ secrets.ADMIN_EMAIL }}" \
            -detailed-exitcode \
            -no-color > drift-report.txt 2>&1

          EXITCODE=$?
          if [ $EXITCODE -eq 2 ]; then
            echo "::warning::Drift detected in ${{ matrix.environment }} environment"
            echo "### ⚠️ Drift Detected in ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -E '^\s*(~|\+|-)\s' drift-report.txt | head -30 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ No drift in ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 9: Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [setup, terraform-apply, smoke-tests]
    if: always()
    steps:
      - name: Determine Status
        id: status
        run: |
          if [[ "${{ needs.terraform-apply.result }}" == "success" ]] && [[ "${{ needs.smoke-tests.result }}" == "success" || "${{ needs.smoke-tests.result }}" == "skipped" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.terraform-apply.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "emoji=⚠️" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack Notification
        if: secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "attachments": [{
                "color": "${{ steps.status.outputs.color }}",
                "title": "${{ steps.status.outputs.emoji }} Terraform Pipeline ${{ steps.status.outputs.status }}",
                "fields": [
                  {
                    "title": "Environment",
                    "value": "${{ needs.setup.outputs.environment }}",
                    "short": true
                  },
                  {
                    "title": "Triggered By",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  }
                ],
                "footer": "GitHub Actions",
                "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "ts": ${{ github.event.head_commit.timestamp }}
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create Issue on Failure
        if: failure() && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Terraform Pipeline Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `## Pipeline Failure Report

              **Environment:** ${{ needs.setup.outputs.environment }}
              **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              **Commit:** ${{ github.sha }}
              **Triggered by:** @${{ github.actor }}

              ### Failed Jobs
              - Terraform Apply: ${{ needs.terraform-apply.result }}
              - Smoke Tests: ${{ needs.smoke-tests.result }}

              Please investigate and fix the issue.`,
              labels: ['bug', 'terraform', 'pipeline-failure']
            });

      - name: Update Status Badge
        if: github.ref == 'refs/heads/main'
        run: |
          echo "### Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "![Pipeline Status](https://github.com/${{ github.repository }}/workflows/Terraform%20CI%2FCD%20Pipeline/badge.svg)" >> $GITHUB_STEP_SUMMARY