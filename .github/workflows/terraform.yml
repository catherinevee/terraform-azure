name: Terraform

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
    paths:
      - '**.tf'
      - '**.tfvars'
      - 'modules/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - '**.tf'
      - '**.tfvars'
      - 'modules/**'
  schedule:
    - cron: '0 2 * * 1'  # Weekly drift detection
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TERRAFORM_VERSION: '1.5.7'
  TFLINT_VERSION: '0.48.0'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      should-deploy: ${{ steps.set-env.outputs.should-deploy }}
      is-pr: ${{ steps.set-env.outputs.is-pr }}
      action: ${{ steps.set-env.outputs.action }}
    steps:
      - name: Determine environment and action
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
            echo "should-deploy=${{ github.event.inputs.action == 'apply' }}" >> $GITHUB_OUTPUT
            echo "is-pr=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "action=plan" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "is-pr=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "action=apply" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "is-pr=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "action=apply" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "is-pr=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "action=plan" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "is-pr=false" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "action=plan" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "is-pr=false" >> $GITHUB_OUTPUT
          fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request' || github.event_name == 'schedule'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: true

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          soft_fail: true

  terraform:
    name: 'Terraform (${{ needs.setup.outputs.environment }})'
    runs-on: ubuntu-latest
    needs: setup
    environment: ${{ needs.setup.outputs.environment }}


    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Cache Terraform
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            **/.terraform/providers
          key: terraform-${{ needs.setup.outputs.environment }}-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.BACKEND_CONTAINER }}" \
            -backend-config="key=${{ needs.setup.outputs.environment }}.terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan -input=false \
            -var-file=environments/${{ needs.setup.outputs.environment }}/terraform.tfvars
          terraform show -no-color tfplan > plan.txt

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: terraform-plan-${{ needs.setup.outputs.environment }}
          path: plan.txt
          retention-days: 30

      - name: Comment PR
        uses: actions/github-script@v8
        if: needs.setup.outputs.is-pr == 'true'
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('plan.txt', 'utf8');
            const output = `#### Terraform Plan 📖 \`${{ needs.setup.outputs.environment }}\`
            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${plan}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Apply
        if: needs.setup.outputs.should-deploy == 'true' && needs.setup.outputs.action == 'apply'
        run: terraform apply tfplan

      - name: Terraform Destroy
        if: needs.setup.outputs.action == 'destroy'
        run: terraform destroy -auto-approve

      - name: Terraform Output
        if: needs.setup.outputs.should-deploy == 'true' && needs.setup.outputs.action == 'apply'
        run: terraform output -json > outputs.json

      - name: Upload Outputs
        if: needs.setup.outputs.should-deploy == 'true' && needs.setup.outputs.action == 'apply'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-${{ needs.setup.outputs.environment }}
          path: outputs.json
          retention-days: 90

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [setup, terraform]
    if: always()
    steps:
      - name: Job Summary
        run: |
          echo "## Terraform Deployment Summary 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: ${{ needs.setup.outputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.terraform.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.terraform.result }}" == "success" ]]; then
            echo "✅ Deployment completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi